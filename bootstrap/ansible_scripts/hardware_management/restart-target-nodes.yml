# USAGE:
#
# - target: specify the nodes to be rebooted via a hosts pattern
#   (start with ~, e.g. "~blah" for a regex pattern)
#
# - control_headnode: specify the  head node to use to execute the
#   Ceph/nova management commands (strictly speaking it does not have
#   to be a head node, but it must have admin access to Ceph
#   and have /root/adminrc present with admin credentials)
#
# - serial (default 1): specify the number of nodes to work on at once
#   WARNING: for serial higher than 1 it is strongly recommended to also
#   specify -c paramiko to avoid Ansible tripping over itself and closing
#   the SSH shared connection for the delegation, which will require all
#   sorts of obnoxious cleanup
#   WARNING: note that when waiting for nova-network with serial > 1,
#   the sleep time will be the value calculated for the first node
#   alphabetically in the batch of nodes being worked on (so it may be
#   insufficiently long for the rest of the nodes in the batch to get
#   all their networks set up again)
#
# - chef_after_reboot (default true): do not rechef nodes after reboot (the
#   default, in order to ensure MD devices are configured and kernel tools
#   packages are installed after kernel upgrades)
---
- include: ../common_playbooks/validate_environment.yml

- hosts: bootstraps
  gather_facts: no
  vars_prompt:
    - name: "reboot_confirm"
      prompt: "Please type YES to confirm you want to reboot nodes"
      default: "no"
      private: no
  tasks:
    - fail: msg="Acknowledgement not received, exiting"
      when: reboot_confirm != "YES"
      tags:
        - always

    - set_fact: control_headnode={{ groups['headnodes'][0] }}
      when: control_headnode is not defined
      tags:
        - always

    - set_fact: manage_noout=True
      when: manage_noout is not defined
      tags:
        - always

    - name: Set noout
      command: ceph osd set noout
      delegate_to: "{{ control_headnode }}"
      when: manage_noout
      tags:
        - always

- hosts: "{{ target }}"
  become: yes
  gather_facts: no
  serial: "{{ serial|default(1) }}"
  tasks:
    - set_fact: control_headnode={{ groups['headnodes'][0] }}
      when: control_headnode is not defined
      tags:
        - always

    - name: Get running instances on hypervisor
      command: virsh list --state-running --uuid
      register: running_instances_raw
      tags:
        - stopstart

    - name: Render instance list into fact
      set_fact: running_instances="{{ running_instances_raw.stdout.split('\n') }}"
      tags:
        - stopstart

    - name: Run Chef after reboot?
      set_fact: chef_after_reboot_internal="{{ chef_after_reboot | default(True) }}"

    - name: Get hosts in general compute aggregate
      shell: ". /root/adminrc && nova aggregate-details general_compute"
      register: general_compute_agg
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Remove node from general compute aggregate
      shell: ". /root/adminrc && nova aggregate-remove-host general_compute {{ inventory_hostname }}"
      when: general_compute_agg.stdout | search("{{ inventory_hostname }}")
      register: general_compute_agg_remove
      failed_when: general_compute_agg_remove.rc != 0 and "404" not in general_compute_agg_remove.stderr
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: nova stop running instances on hypervisor
      shell: ". /root/adminrc && nova stop {{ item }} && sleep 2"
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Verify instances are stopped
      shell: ". /root/adminrc && nova show {{ item }} | grep vm_state | grep -q -v active"
      register: instance_stopped
      until: instance_stopped.rc == 0
      ignore_errors: true
      retries: 20
      delay: 3
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Lock stopped instances on the server
      shell: ". /root/adminrc && nova lock {{ item }} && sleep 2"
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      ignore_errors: true
      tags:
        - stopstart

    - name: Reboot hypervisor
      command: /sbin/reboot
      async: false
      poll: false
      ignore_errors: true
      tags:
        - reboot

    - name: Wait for hypervisor to come back online
      become: no
      local_action: wait_for host={{ ansible_ssh_host }} port=22 state=started timeout=1800
      tags:
        - reboot

    - name: Wait to allow Nova Networking to recreate tenant networks
      pause: seconds="{{ ((running_instances | length) * 20)+1 }}"
      tags:
        - reboot

    - name: Rechef node
      command: chef-client
      when: chef_after_reboot_internal
      tags:
        - reboot

    - name: Unlock stopped instances on the server
      shell: ". /root/adminrc && nova unlock {{ item }} && sleep 2"
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      ignore_errors: true
      tags:
        - stopstart

    - name: nova start instances on hypervisor
      shell: ". /root/adminrc && nova start {{ item }} && sleep 15"
      with_items: "{{ running_instances }}"
      delegate_to: "{{ control_headnode }}"
      when: "{{ restart_instances | default(True) }} and item != ''"
      ignore_errors: true
      tags:
        - stopstart

    - name: Add node back to general compute aggregate
      shell: ". /root/adminrc && nova aggregate-add-host general_compute {{ inventory_hostname }}"
      when: (general_compute_agg.stdout | search("{{ inventory_hostname }}")) and (not chef_after_reboot_internal)
      delegate_to: "{{ control_headnode }}"
      tags:
        - stopstart

    - name: Restart OpenStack services
      command: /usr/local/bin/hup_openstack
      tags:
        - always

    - name: Wait 30 seconds for OpenStack services to settle
      command: sleep 30
      tags:
        - always

- hosts: bootstraps
  become: yes
  gather_facts: no
  serial: 1
  tasks:
    - set_fact: control_headnode={{ groups['headnodes'][0] }}
      when: control_headnode is not defined
      tags:
        - always

    - set_fact: manage_noout=True
      when: manage_noout is not defined
      tags:
        - always

    - name: Unset noout
      command: ceph osd unset noout
      delegate_to: "{{ control_headnode }}"
      when: manage_noout
      tags:
        - always
