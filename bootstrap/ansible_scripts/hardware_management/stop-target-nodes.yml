# USAGE:
#
# - target: specify the nodes to be stopped via a hosts pattern
#   (start with ~, e.g. "~blah" for a regex pattern)
#
# - control_headnode: specify the head node to use to execute the
#   Ceph/nova management commands (strictly speaking it does not have
#   to be a head node, but it must have admin access to Ceph
#   and have /root/adminrc present with admin credentials)
#
# - serial (default 1): specify the number of nodes to work on at once
#   WARNING: for serial higher than 1 it is strongly recommended to also
#   specify -c paramiko to avoid Ansible tripping over itself and closing
#   the SSH shared connection for the delegation, which will require all
#   sorts of obnoxious cleanup
---
- include: ../common_playbooks/validate_environment.yml

- hosts: bootstraps
  gather_facts: no
  vars_prompt:
    - name: "shutdown_confirm"
      prompt: "Please type YES to confirm you want to shut down nodes"
      default: "no"
      private: no
  tasks:
    - fail: msg="Acknowledgement not received, exiting"
      when: shutdown_confirm != "YES"
      tags:
        - always

    - set_fact: control_headnode={{ groups['headnodes'][0] }}
      when: control_headnode is not defined
      tags:
        - always

    - set_fact: manage_noout=True
      when: manage_noout is not defined
      tags:
        - always

    - name: Set noout
      command: ceph osd set noout
      delegate_to: "{{ control_headnode }}"
      when: manage_noout
      tags:
        - always

- hosts: "{{ target }}"
  become: yes
  gather_facts: no
  serial: "{{ serial|default(1) }}"
  tasks:
    - set_fact: control_headnode={{ groups['headnodes'][0] }}
      when: control_headnode is not defined
      tags:
        - always

    - name: Get running instances on hypervisor
      command: virsh list --state-running --uuid
      register: running_instances_raw
      tags:
        - stop

    - name: Render instance list into fact
      set_fact: running_instances="{{ running_instances_raw.stdout.split('\n') }}"
      tags:
        - stop

    - name: Create non-temporary location on disk to record the instance list
      file: path=/usr/local/etc/hv_maint state=directory
      tags:
        - stop

    - name: Write the instance list to disk
      copy: dest=/usr/local/etc/hv_maint/instance_list.json content="{{ running_instances|to_json|safe }}"
      when: (running_instances|length > 0) and (running_instances[0] != "")
      tags:
        - stop

    - name: Get hosts in general compute aggregate
      shell: ". /root/adminrc && nova aggregate-details general_compute"
      register: general_compute_agg
      delegate_to: "{{ control_headnode }}"
      tags:
        - stop

    - name: Remove node from general compute aggregate
      shell: ". /root/adminrc && nova aggregate-remove-host general_compute {{ inventory_hostname }}"
      when: general_compute_agg.stdout | search("{{ inventory_hostname }}")
      register: general_compute_agg_remove
      failed_when: general_compute_agg_remove.rc != 0 and "404" not in general_compute_agg_remove.stderr
      delegate_to: "{{ control_headnode }}"
      tags:
        - stop

    - name: nova stop running instances on hypervisor
      shell: ". /root/adminrc && nova stop {{ item }} && sleep 2"
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stop

    - name: Verify instances are stopped
      shell: ". /root/adminrc && nova show {{ item }} | grep vm_state | grep -q -v active"
      register: instance_stopped
      until: instance_stopped.rc == 0
      ignore_errors: true
      retries: 20
      delay: 3
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stop

    - name: Lock stopped instances on the server
      shell: ". /root/adminrc && nova lock {{ item }} && sleep 2"
      with_items: "{{ running_instances }}"
      when: item != ""
      delegate_to: "{{ control_headnode }}"
      tags:
        - stop

    - name: Shut down hypervisor
      command: /sbin/poweroff
      async: false
      poll: false
      ignore_errors: true
      tags:
        - poweroff
