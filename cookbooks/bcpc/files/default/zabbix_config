#!/usr/bin/env python

import sys
from pyzabbix import ZabbixAPI

config = {"ip": sys.argv[1],
          "user": sys.argv[2],
          "password": sys.argv[3]}

templates = ['/tmp/zabbix_linux_active_template.xml',
             '/tmp/zabbix_bcpc_template.xml',
             '/tmp/zabbix_s3_template.xml']
groups = ['BCPC-Headnode',
          'BCPC-Worknode',
          'BCPC-DisklessWorknode',
          'BCPC-CephOSDNode',
          'BCPC-CephMonitorNode',
          'BCPC-Alerting',
          'BCPC-Metrics',
          'BCPC-Logging',
          'BCPC-Bootstrap']

zapi = ZabbixAPI(config["ip"])
# Disable SSL certificate verification
zapi.session.verify = False
zapi.login(config["user"], config["password"])

for name in groups:
    hostg = zapi.hostgroup.exists(name=name)
    if not hostg:
        r = zapi.hostgroup.create(name=name)
        if not r.get("groupids", None):
            raise Exception("Unable to create")

for template in templates:
    fcontents = open(template).read()
    params = {"rules": {}}
    for ii in ["applications",
               "discoveryRules",
               "items",
               "templates",
               "templateLinkage",
               "triggers"]:
        params["rules"][ii] = dict(createMissing=True, updateExisting=True)

        # Get the templates host group id
        params["source"] = fcontents

        params["format"] = "xml"
        r = zapi.confimport(format="xml",
                            source=fcontents,
                            rules=params["rules"])

# Get the templates host group id
templates = zapi.hostgroup.get(filter={"name": "Templates"})
if not templates:
    raise Exception("Failed to find templates group")
template_id = templates[0]["groupid"]

sys.exit(0)
