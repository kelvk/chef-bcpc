_FLAVOR_CLASS_ORDER = ['generic1', 'generic2']
_flavor_class_map = dict([(name, rank)
                         for rank, name in enumerate(_FLAVOR_CLASS_ORDER)])
# Sort by flavor prefix in pre-defined order, then flavor ram. If prefix not
# matched, punt to back of list and stably sort all unmatched # prefixes by
# flavor ram.
def bcpc_flavor_sort(obj):
    prefix = str(getattr(obj, 'name', '')).split('.')[0]
    flavor_ram = int(getattr(obj, 'ram', 0))
    flavor_cpu = int(getattr(obj, 'vcpus', 1))
    pfx_score = int(_flavor_class_map.get(prefix, len(_flavor_class_map)))
    rv_score = flavor_ram
    if hasattr(globals(), 'logging'):
        logging.debug({'obj': obj.name, 'prefix': prefix,
                       'pfx_score': pfx_score, 'rv_score': rv_score})
    return (pfx_score, rv_score)

# When launching an instance, the menu of available flavors is
# sorted by RAM usage, ascending. If you would like a different sort order,
# you can provide another flavor attribute as sorting key. Alternatively, you
# can provide a custom callback method to use for sorting. You can also provide
# a flag for reverse sort. For more info, see
# http://docs.python.org/2/library/functions.html#sorted
CREATE_INSTANCE_FLAVOR_SORT = {
     'key': bcpc_flavor_sort,
     'reverse': False,
}
